generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  super_admin
}

enum ReactionType {
  like
  love
  haha
  wow
  sad
  angry
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum NotificationType {
  MENTION
  LIKE
  COMMENT
  COMMENT_REACT
  POST_REACT
  REPLAY_REACT
  REPLAY
  FOLLOW
  FOLLOW_BACK
  UNFOLLOW
  BLOCK
  SHARE
  SYSTEM
  MENTION_POST
  MENTION_COMMENT
  MENTION_REPLAY
  REPLAY_IN_REPLAY

  REPLY_REACT_AUTHOR // Notify the original post author when a reply to their post is reacted to
  REPLY_REACT_COMMENTER // Notify the user who commented when their reply is reacted to  

  COMMENT_REACT_AUTHOR // Notify the original post author when a reply to their post is reacted to
  COMMENT_REACT_COMMENTER // Notify the user who commented when their reply is reacted to  
}

model User {
  id                    Int                  @id @default(autoincrement())
  email                 String               @unique
  first_name            String
  user_name             String               @unique
  last_name             String
  password              String
  role                  Role                 @default(user)
  profile               Profile?
  post                  post[]
  // comments              Comment[]
  gender                Gender               @default(MALE)
  expiresAt             DateTime             @default(dbgenerated("NOW() + INTERVAL '6 months'")) // Automatically set expiration date
  isPrivate             Boolean              @default(false)
  category_post_User    category_post_User[]
  notificationsSent     Notification[]       @relation("UserNotifier")
  notificationsReceived Notification[]       @relation("UserNotifying")
  Mention               Mention[]
  HashtagFollow         HashtagFollow[]
  Interaction           Interaction[]
  Save_catagory         Save_catagory[]
  // InteractionShare      InteractionShare[]

  //   created_at DateTime @default(now())
  // updated_at DateTime @updatedAt
  @@index([user_name], type: Hash)
}

model Hashtag {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  posts         PostHashtag[]
  share         ShareHashtag[]
  HashtagFollow HashtagFollow[]
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt

  @@index([name])
}

model HashtagFollow {
  id         Int      @id @default(autoincrement())
  userId     Int
  hashtagId  Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashtag    Hashtag  @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([userId, hashtagId])
}

model PostHashtag {
  id         Int      @id @default(autoincrement())
  postId     Int
  hashtagId  Int
  post       post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag    Hashtag  @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([postId, hashtagId])
  @@index([postId])
  @@index([hashtagId])
}

model ShareHashtag {
  id         Int      @id @default(autoincrement())
  shareId    Int
  hashtagId  Int
  share      Share    @relation(fields: [shareId], references: [id], onDelete: Cascade)
  hashtag    Hashtag  @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([shareId, hashtagId])
  @@index([shareId])
  @@index([hashtagId])
}

model Notification {
  id          Int              @id @default(autoincrement())
  notifierId  Int
  notifyingId Int
  type        NotificationType
  postId      Int?
  post        post?            @relation("postNotifcation", fields: [postId], references: [id], onDelete: Cascade)

  commentId         Int?
  commentNotication Comment? @relation("commentNotication", fields: [commentId], references: [id], onDelete: Cascade)

  replayId         Int?
  replayNotication replay? @relation("replayNotication", fields: [replayId], references: [id], onDelete: Cascade)

  shareId         Int?
  shareNotication Share? @relation("shareNotication", fields: [shareId], references: [id], onDelete: Cascade)

  replayLikesId Int?
  replayLikes   replayLikes? @relation("ReplayLikesNotication", fields: [replayLikesId], references: [id], onDelete: Cascade)

  PostReactionId         Int?
  postReactionNotication Reaction? @relation("postReactionNotication", fields: [PostReactionId], references: [id], onDelete: Cascade)

  commentReactionId         Int?
  commentReactionNotication reactionsComment? @relation("commentReactionNotication", fields: [commentReactionId], references: [id], onDelete: Cascade)

  mentionid         Int?
  mentionNotication Mention? @relation("mentionNotication", fields: [mentionid], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  read      Boolean  @default(false) // Mark notification as read or unread

  notifier  User @relation("UserNotifier", fields: [notifierId], references: [id], onDelete: Cascade)
  notifying User @relation("UserNotifying", fields: [notifyingId], references: [id], onDelete: Cascade)

  // Notifier: The user who triggers the notification (e.g., the one who comments, likes, or performs some action that results in a notification being sent).
  // Notifying: The user who receives the notification (e.g., the one who is being notified about the action).
  @@index([notifierId, notifyingId])
}

model Profile {
  id                Int              @id @default(autoincrement())
  user_id           Int              @unique
  user              User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  bio               String?
  profile_picture   String?
  cover_picture     String?
  location          String?
  website           Json?            @default("{}")
  birthdate         DateTime?
  PhoneNumber       Int?
  title             String?
  isVerified        Boolean          @default(false)
  isCompleteProfile Boolean          @default(false)
  followers         Follows[]        @relation("UserFollowers")
  following         Follows[]        @relation("UserFollowing")
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  profilePictures   ProfilePicture[]
}

enum ProfilePictureType {
  profile
  cover
}

model ProfilePicture {
  id         Int      @id @default(autoincrement())
  url        String
  public_id  String
  asset_id   String
  width      Int
  height     Int
  public_url String
  format     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  secure_url String

  asset_folder String
  display_name String
  tags         String[]
  type         ProfilePictureType // 'profile' or 'cover'
  HashBlur     String
  profileId    Int                
  profile      Profile            @relation(fields: [profileId], references: [id])
  @@unique([type , profileId])
}

model Follows {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    Profile  @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   Profile  @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([followerId, followingId])
}

model post {
  id           Int             @id @default(autoincrement())
  author_id    Int
  author       User            @relation(fields: [author_id], references: [id], onDelete: Cascade)
  title        String?
  created_at   DateTime        @default(now())
  updated_at   DateTime        @updatedAt
  published    Boolean         @default(false)
  categories   category_post[]
  post_image   post_image[]
  Notification Notification[]  @relation("postNotifcation")
  Interactions Interaction[]
  PostHashtag  PostHashtag[]
  Mention      Mention[]
  parentId     Int?
  parent       post?           @relation("nestedPostForShare", fields: [parentId], references: [id])
  post         post[]          @relation("nestedPostForShare")
  Share        Share?
}

model reactionsComment {
  id           Int            @id @default(autoincrement())
  comment_id   Int
  comment      Comment        @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  emoji        String
  names        Json           @default("[]")
  imageUrl     String
  innteractId  Int
  Interaction  Interaction    @relation(fields: [innteractId], references: [id], onDelete: Cascade)
  Notification Notification[] @relation("commentReactionNotication")

  // InteractionShare   InteractionShare? @relation(fields: [interactionShareId], references: [id], onDelete: Cascade)
  // interactionShareId Int?
  // @@unique([comment_id, interactionShareId])

  @@unique([comment_id, innteractId])
}

model Share {
  id           Int            @id @default(autoincrement())
  content      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  post_id      Int?           @unique
  post         post?          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  Notification Notification[] @relation("shareNotication")

  ShareHashtag ShareHashtag[]

  // InteractionShare InteractionShare[]
  // Interaction  Interaction[]
}

model Save {
  id              Int            @id @default(autoincrement())
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  InteractionId   Int
  Interaction     Interaction    @relation(fields: [InteractionId], references: [id], onDelete: Cascade)
  Save_catagory   Save_catagory? @relation(fields: [save_catagoryId], references: [id], onDelete: Cascade)
  save_catagoryId Int?

  @@unique([InteractionId])
}

model Save_catagory {
  id        Int    @id @default(autoincrement())
  author_id Int
  user      User   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  name      String
  save      Save[]

  @@unique([author_id, name])
}

enum typePin {
  TIME_LINE

  PRIVATE_PROFILE
  PUBLIC_PROFILE
}

model pin {
  id            Int         @id @default(autoincrement())
  type          typePin     @default(PUBLIC_PROFILE)
  tag           Json        @default("[]")
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  InteractionId Int
  Interaction   Interaction @relation(fields: [InteractionId], references: [id])

  @@index([InteractionId])
}

enum InteractionType {
  REPLAY
  REPLAY_LIKE
  SHARE
  REACTION
  COMMENT
  COMMENTREACT
  MENTION_POST
  MENTION_COMMENT
  MENTION_REPLAY
  SAVE
  PIN
}

model Interaction {
  id        Int             @id @default(autoincrement())
  type      InteractionType
  author_id Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  // Relations
  author User @relation(fields: [author_id], references: [id], onDelete: Cascade)

  // Optional relations
  postId Int?
  post   post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  commentReaction reactionsComment[]
  replay          replay[]
  comment         Comment[]
  reaction        Reaction[]
  replayLikes     replayLikes[]
  Mention         Mention[]
  pin             pin[]

  save Save[]

  @@unique([author_id, postId, type])
}

model Comment {
  id               Int                @id @default(autoincrement())
  content          String
  reactionsComment reactionsComment[]
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  replay           replay[]
  Notification     Notification[]     @relation("commentNotication")
  innteractId      Int?
  Interaction      Interaction?       @relation(fields: [innteractId], references: [id], onDelete: Cascade)

  Mention Mention[]
}

model replay {
  id           Int            @id @default(autoincrement())
  comment_id   Int
  comment      Comment        @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  content      String
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Notification Notification[] @relation("replayNotication")
  replayLikes  replayLikes[]
  innteractId  Int?
  Interaction  Interaction?   @relation(fields: [innteractId], references: [id], onDelete: Cascade)
  Mention      Mention[]

  parentId Int?
  parent   replay?  @relation("ReplayReplies", fields: [parentId], references: [id])
  replies  replay[] @relation("ReplayReplies")

  @@index([comment_id])
}

enum mentionType {
  POST
  COMMENT
  REPLAY
  SHARE
}

model Mention {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      Int?
  shareId     Int?
  commentId   Int?
  replayId    Int?
  startPos    Int?        @default(0)
  endPos      Int?        @default(0)
  mentionType mentionType
  post        post[]

  interactioneId Int?
  Interaction    Interaction?   @relation(fields: [interactioneId], references: [id], onDelete: Cascade)
  notifcation    Notification[] @relation("mentionNotication")
  comment        Comment[]
  replay         replay[]
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
}

model replayLikes {
  id           Int            @id @default(autoincrement())
  replay_id    Int
  replay       replay         @relation(fields: [replay_id], references: [id], onDelete: Cascade)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Notification Notification[] @relation("ReplayLikesNotication")
  innteractId  Int
  Interaction  Interaction    @relation(fields: [innteractId], references: [id], onDelete: Cascade)

  @@unique([replay_id, innteractId])
}

model Reaction {
  id           Int            @id @default(autoincrement())
  type         ReactionType
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  innteractId  Int
  Interaction  Interaction    @relation(fields: [innteractId], references: [id], onDelete: Cascade)
  Notification Notification[] @relation("postReactionNotication")
}

model category {
  id    Int             @id @default(autoincrement())
  name  String
  posts category_post[]
}

model category_post {
  id                 Int                 @id @unique @default(autoincrement())
  post_id            Int
  category_id        Int
  assigned_at        DateTime            @default(now())
  post               post                @relation(fields: [post_id], references: [id], onDelete: Cascade)
  category           category            @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_post_User category_post_User?

  @@unique([post_id, category_id])
}

model category_post_User {
  id               Int           @id @default(autoincrement())
  user_id          Int
  category_post_id Int
  User             User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category_post    category_post @relation(fields: [category_post_id], references: [id], onDelete: Cascade)

  @@unique([category_post_id])
}

model post_image {
  id           Int    @id @default(autoincrement())
  img_path     String
  post_id      Int
  public_id    String
  asset_id     String
  width        Int
  height       Int
  asset_folder String
  display_name String
  tags         Json   @default("[]")
  type         String
  post         post   @relation(fields: [post_id], references: [id], onDelete: Cascade)
}
